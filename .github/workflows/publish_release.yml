name: Publish Releases

on:
  # Triggers on tag creation
  create:
  # Triggers on release creation
  release:
    types: [created]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # Only run this job if we're dealing with a tag
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Extract version from tag
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Step 3: Prepare Docker Image Tags
      - name: Prepare Docker Image
        id: prep
        run: |
          DOCKER_IMAGE=premoweb/${GITHUB_REPOSITORY#*/}
          SHORTREF=${GITHUB_SHA::8}
          VERSION=${{ steps.version.outputs.version }}
          
          # Add tags for Docker Hub Container registry
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF},${DOCKER_IMAGE}:latest"
          
          # Add tags for Github Container Registry
          DOCKER_IMAGE=ghcr.io/premoweb/${GITHUB_REPOSITORY#*/}
          TAGS="${TAGS},${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF},${DOCKER_IMAGE}:latest"
          
          # Set output parameters.
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT

      # Step 4: Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      # Step 5: Set up Docker Buildx for multi-arch builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      # Step 7: Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Build and Push Docker Images
      - name: Build and Push Docker Images
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.prep.outputs.tags }}

      # Step 9: Set up Go environment for building binaries
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      # Step 10: Build Go binaries for multiple platforms
      - name: Build Go Binaries
        id: build_binaries
        run: |
          # Create a directory for binaries
          mkdir -p ./dist
          
          # Build for Linux (amd64, arm64, arm)
          GOOS=linux GOARCH=amd64 go build -o ./dist/chadburn-linux-amd64
          GOOS=linux GOARCH=arm64 go build -o ./dist/chadburn-linux-arm64
          GOOS=linux GOARCH=arm GOARM=7 go build -o ./dist/chadburn-linux-armv7
          
          # Build for macOS (amd64, arm64)
          GOOS=darwin GOARCH=amd64 go build -o ./dist/chadburn-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o ./dist/chadburn-darwin-arm64
          
          # Build for Windows (amd64, arm64)
          GOOS=windows GOARCH=amd64 go build -o ./dist/chadburn-windows-amd64.exe
          GOOS=windows GOARCH=arm64 go build -o ./dist/chadburn-windows-arm64.exe
          
          # Create archives for each binary
          cd ./dist
          
          # Linux archives
          tar -czf chadburn-linux-amd64.tar.gz chadburn-linux-amd64
          tar -czf chadburn-linux-arm64.tar.gz chadburn-linux-arm64
          tar -czf chadburn-linux-armv7.tar.gz chadburn-linux-armv7
          
          # macOS archives
          tar -czf chadburn-darwin-amd64.tar.gz chadburn-darwin-amd64
          tar -czf chadburn-darwin-arm64.tar.gz chadburn-darwin-arm64
          
          # Windows archives (zip)
          zip chadburn-windows-amd64.zip chadburn-windows-amd64.exe
          zip chadburn-windows-arm64.zip chadburn-windows-arm64.exe
          
          cd ..

      # Step 11: Generate checksums for all archives
      - name: Generate checksums
        run: |
          cd ./dist
          sha256sum *.tar.gz *.zip > checksums.txt
          cd ..

      # Step 12: Upload binaries as artifacts
      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chadburn-binaries
          path: |
            ./dist/*.tar.gz
            ./dist/*.zip
            ./dist/checksums.txt

      # Step 13: Attach binaries to GitHub Release
      - name: Attach binaries to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./dist/*.tar.gz
            ./dist/*.zip
            ./dist/checksums.txt
          token: ${{ secrets.GITHUB_TOKEN }}
